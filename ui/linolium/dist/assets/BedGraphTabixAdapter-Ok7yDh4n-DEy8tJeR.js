import{m as y}from"./tabixIndexedFile-kFQg_R3d-BgchFq_1.js";import"./unzip-CwWdnRSo-02Ze3MCz.js";import{e as $}from"./index-Bp4pXTEU-Cipcrd2k.js";import{a1 as p,u as F}from"./JBrowsePanel-CjeUdi3D-Dhrr89W5.js";import{o as L}from"./rxjs-euq-mp90-DvajfGj-.js";import"./AbortablePromiseCache-CcuMrnn7-56xRj2xE.js";import"./browser-BpRiKmO--zAOSyNoU.js";import"./remoteFile-DvhH--az-9OF1arfw.js";import"./taxonium-component.es-D8UFPkMd.js";import"./index-Bwk-R6QR.js";import"./index-CJFOLICt-oWu2Snlz.js";class I extends $.BaseFeatureDataAdapter{async configurePre(){const e=this.pluginManager,i=this.getConf("bedGraphGzLocation"),t=this.getConf(["index","location"]),a=this.getConf(["index","indexType"]),s=p.openLocation(i,e),c=a==="CSI",r=new y({filehandle:s,csiFilehandle:c?p.openLocation(t,e):void 0,tbiFilehandle:c?void 0:p.openLocation(t,e),chunkCacheSize:50*2**20}),l=this.getConf("columnNames"),o=await r.getHeader();return{columnNames:l,bedGraph:r,header:o}}async configure(){return this.configured||(this.configured=this.configurePre().catch(e=>{throw this.configured=void 0,e})),this.configured}async getNames(){const{bedGraph:e,columnNames:i}=await this.configure();if(i.length)return i;const t=(await e.getHeader()).split(/\n|\r\n|\r/).filter(a=>!!a).at(-1);return t!=null&&t.includes("	")?t.slice(1).split("	").map(a=>a.trim()):void 0}async getRefNames(e={}){const{bedGraph:i}=await this.configure();return i.getReferenceSequenceNames(e)}async getHeader(){const{bedGraph:e}=await this.configure();return e.getHeader()}getFeatures(e,i={}){return L.ObservableCreate(async t=>{var a;const{bedGraph:s}=await this.configure(),c=await s.getMetadata(),{columnNumbers:r}=c,l=r.ref-1,o=r.start-1,d=r.end-1,h=o===d,w=((a=await this.getNames())===null||a===void 0?void 0:a.slice(h?2:3))||[];await s.getLines(e.refName,e.start+(h?-1:0),e.end,{lineCallback:(f,C)=>{const u=f.split("	"),v=u[l],m=+u[o],g=+(h?m+1:u[d]),N=u.slice(d+1);if(Number.isNaN(m)||Number.isNaN(g))throw new Error(`start/end NaN on line "${f}", with colStart:${o} and colEnd:${d}. run "tabix -p bed" to ensure bed preset`);for(let n=0;n<N.length;n++){const x=`${this.id}-${C}-${n}`,b=Math.abs(+N[n]),G=w[n]||`col${n}`;b&&t.next(new F.SimpleFeature({id:x,data:{refName:v,start:m,end:g,score:b,source:G}}))}},...i}),t.complete()})}}export{I as default};
