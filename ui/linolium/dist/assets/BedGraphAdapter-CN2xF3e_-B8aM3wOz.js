import{f as F}from"./main-D1zX1xg0-CI_PM91Q.js";import{e as w}from"./index-Bp4pXTEU-Cipcrd2k.js";import{u as p,a1 as y}from"./JBrowsePanel-CjeUdi3D-Dhrr89W5.js";import{x as T}from"./parseLineByLine-Be3SOOi9-j_LJE5Tt.js";import{o as N}from"./rxjs-euq-mp90-DvajfGj-.js";import"./index-Bwk-R6QR.js";import"./taxonium-component.es-D8UFPkMd.js";class k extends w.BaseFeatureDataAdapter{constructor(){super(...arguments),this.intervalTrees={}}async getNames(){const{header:e,columnNames:t}=await this.loadData();if(t.length)return t;const r=e.split(/\n|\r\n|\r/).filter(a=>!!a).at(-1);return r!=null&&r.includes("	")?r.slice(1).split("	").map(a=>a.trim()):void 0}async loadFeatureIntervalTreeHelper(e){var t;const{features:r}=await this.loadData(),a=r[e];if(!a)return;const n=((t=await this.getNames())===null||t===void 0?void 0:t.slice(3))||[],o=new F;for(let s=0;s<a.length;s++){const i=a[s],[u,c,v,...d]=i.split("	");for(let l=0;l<d.length;l++){const g=`${this.id}-${u}-${s}-${l}`,h=+c,m=+v,f=+d[l],b=n[l]||`col${l}`;f&&o.insert([h,m],new p.SimpleFeature({id:g,data:{refName:u,start:h,end:m,score:f,source:b}}))}}return o}async getRefNames(e={}){const{features:t}=await this.loadData(e);return Object.keys(t)}async loadDataP(e={}){const t=this.pluginManager,r=this.getConf("bedGraphLocation"),a=await p.fetchAndMaybeUnzip(y.openLocation(r,t),e),n={},o=[];T.parseLineByLine(a,i=>{if(i.startsWith("#"))o.push(i);else{const u=i.indexOf("	"),c=i.slice(0,u);n[c]||(n[c]=[]),n[c].push(i)}return!0},e.statusCallback);const s=this.getConf("columnNames");return{header:o.join(`
`),features:n,columnNames:s}}async loadFeatureIntervalTree(e){return this.intervalTrees[e]||(this.intervalTrees[e]=this.loadFeatureIntervalTreeHelper(e).catch(t=>{throw this.intervalTrees[e]=void 0,t})),this.intervalTrees[e]}async loadData(e={}){return this.bedFeatures||(this.bedFeatures=this.loadDataP(e).catch(t=>{throw this.bedFeatures=void 0,t})),this.bedFeatures}getFeatures(e,t={}){return N.ObservableCreate(async r=>{const{start:a,end:n,refName:o}=e,s=await this.loadFeatureIntervalTree(o);for(const i of(s==null?void 0:s.search([a,n]))||[])r.next(i);r.complete()})}}export{k as default};
