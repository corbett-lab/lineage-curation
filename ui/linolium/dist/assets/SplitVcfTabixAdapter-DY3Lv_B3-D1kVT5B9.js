import{m as f}from"./tabixIndexedFile-kFQg_R3d-BgchFq_1.js";import"./unzip-CwWdnRSo-02Ze3MCz.js";import{Q as g,q as h}from"./index-BvvsWeUy-CPrgRp4B.js";import{e as d}from"./index-Bp4pXTEU-Cipcrd2k.js";import{a1 as p,u as m}from"./JBrowsePanel-CjeUdi3D-Dhrr89W5.js";import{o as v}from"./rxjs-euq-mp90-DvajfGj-.js";import"./AbortablePromiseCache-CcuMrnn7-56xRj2xE.js";import"./browser-BpRiKmO--zAOSyNoU.js";import"./remoteFile-DvhH--az-9OF1arfw.js";import"./taxonium-component.es-D8UFPkMd.js";import"./index-Bwk-R6QR.js";import"./index-CJFOLICt-oWu2Snlz.js";class $ extends d.BaseFeatureDataAdapter{async configurePre(a){const e=this.getConf("indexType"),t=this.getConf("vcfGzLocationMap")[a],i=this.getConf("indexLocationMap")[a]||{uri:`${t.uri}.${e.toLowerCase()}`},r=p.openLocation(t,this.pluginManager),s=e==="CSI",n=new f({filehandle:r,csiFilehandle:s?p.openLocation(i,this.pluginManager):void 0,tbiFilehandle:s?void 0:p.openLocation(i,this.pluginManager),chunkCacheSize:50*2**20});return{vcf:n,parser:new g({header:await n.getHeader()})}}async configure(a,e){const{statusCallback:t=()=>{}}=e||{};return m.updateStatus("Downloading index",t,()=>this.configurePre(a))}async getRefNames(){return Object.keys(this.getConf("vcfGzLocationMap"))}getFeatures(a,e={}){return v.ObservableCreate(async t=>{const{refName:i,start:r,end:s}=a,{statusCallback:n=()=>{}}=e,{vcf:o,parser:c}=await this.configure(a.refName,e);await m.updateStatus("Downloading variants",n,()=>o.getLines(i,r,s,{lineCallback:(l,u)=>{t.next(new h({variant:c.parseLine(l),parser:c,id:`${this.id}-vcf-${u}`}))},...e})),t.complete()},e.stopToken)}async getSources(){const a=this.getConf("samplesTsvLocation"),e=Object.keys(this.getConf("vcfGzLocationMap"))[0];if(a.uri===""||a.uri==="/path/to/samples.tsv"){const{parser:t}=await this.configure(e);return t.samples.map(i=>({name:i}))}else{const t=(await m.fetchAndMaybeUnzipText(p.openLocation(a,this.pluginManager))).split(/\n|\r\n|\r/),i=t[0].split("	"),{parser:r}=await this.configure(e),s=new Set(r.samples);return t.slice(1).map(n=>{const o=n.split("	");return{name:o[0],...Object.fromEntries(o.slice(1).map((c,l)=>[i[l+1],c]))}}).filter(n=>s.has(n.name))}}}export{$ as default};
