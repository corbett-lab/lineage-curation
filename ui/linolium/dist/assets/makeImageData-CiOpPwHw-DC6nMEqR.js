import{O as E,u,ak as B,al as N}from"./JBrowsePanel-CjeUdi3D-Dhrr89W5.js";import{k as W,e as d,p as Z,v as z}from"./drawPhased-ExmTWoR2-BQ7uHNxE.js";import"./index-Bwk-R6QR.js";import"./taxonium-component.es-D8UFPkMd.js";import"./util-B1Sm35mH-zsEGfboc.js";async function ee(c,w){const{scrollTop:O,minorAlleleFrequencyFilter:R,sources:h,rowHeight:m,features:D,regions:H,bpPerPx:P,renderingMode:$,stopToken:p,lengthCutoffFilter:j,referenceDrawingMode:F}=w,G=H[0],{statusCallback:S=()=>{}}=w;E.checkStopToken(p);const T=await u.updateStatus("Calculating stats",S,()=>B({stopToken:p,features:D.values(),minorAlleleFrequencyFilter:R,lengthCutoffFilter:j}));E.checkStopToken(p);const k=new N;return await u.updateStatus("Drawing variants",S,()=>{u.forEachWithStopTokenCheck(T,p,({mostFrequentAlt:t,feature:o})=>{const[x,J]=u.featureSpanPx(o,G,P),L=o.get("end")-o.get("start"),f=Math.max(Math.round(J-x),2),C=o.get("genotypes");let a=-O;const b=h.length;if($==="phased")for(let s=0;s<b;s++){const{name:i,HP:g}=h[s],e=C[i],r=Math.floor(x),l=Math.max(m,1);if(e)if(e.includes("|")){const n=e.split("|");W(n,c,r,a,f,l,g,void 0,F==="draw")&&k.insert({minX:r,maxX:r+f,minY:a,maxY:a+l,genotype:e,name:i,featureId:o.id()})}else c.fillStyle="black",c.fillRect(r-d,a-d,f+d,l+d);a+=m}else{const s={};for(let i=0;i<b;i++){const{name:g}=h[i],e=C[g],r=Math.floor(x),l=Math.max(m,1);if(e){let n=s[e];if(n===void 0){let v=0,Y=0,A=0,I=0;const X=e.split(/[/|]/),q=X.length;for(let y=0;y<q;y++){const M=X[y];M===t?v++:M==="0"?I++:M==="."?Y++:A++}n=Z(I,v,A,Y,q,F==="draw"),s[e]=n}n&&(z(n,c,r,a,f,l,o.get("type"),o.get("strand"),L>5?.75:1),k.insert({minX:r,maxX:r+f,minY:a,maxY:a+l,genotype:e,name:g,featureId:o.id()}))}a+=m}}})}),{rbush:k.toJSON(),featureGenotypeMap:Object.fromEntries(T.map(({feature:t})=>[t.id(),{alt:t.get("ALT"),ref:t.get("REF"),name:t.get("name"),description:t.get("description"),length:t.get("end")-t.get("start")}]))}}export{ee as makeImageData};
